import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

import javax.net.ssl.HttpsURLConnection;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

// API call to retrieve weather data
public class WeatherApp {
	public static JSONObject getWeatherData(String locationName) {
		JSONArray locationData = getLocationData(locationName);
		
		// retrieving longitude and latitude
		JSONObject location = (JSONObject) locationData.get(0);
		
		double longitude = (double) location.get("longitude");
		double latitude = (double) location.get("latitude");
		
		// build Api request Url with location coordinates
		
		String urlString = "https://api.open-meteo.com/v1/forecast?latitude=" + latitude + 
				"&longitude=" + longitude + 
				"&current=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,weather_code,wind_speed_10m&timezone=auto";
		
		try {
			// call api and get response
			HttpsURLConnection conn = fetchApiResponse(urlString);
			
			// check response status
			// 200 - success
			
			if(conn.getResponseCode() != 200) {
				System.out.println("Error: Couldn't connect to Api");
				return null;
			} 
			
			StringBuilder resultJSON = new StringBuilder();
			Scanner scanner = new Scanner(conn.getInputStream());
			
			while(scanner.hasNext()) {
				resultJSON.append(scanner.nextLine());
			}
			
			// close scanner
			scanner.close();
			
			// close url connection
			conn.disconnect();
			
			// parse through our data
			JSONParser parser  = new JSONParser();
			JSONObject resultsJsonObj = (JSONObject) parser.parse(String.valueOf(resultJSON));
			
			// retrieve hourly data
			JSONObject hourly = (JSONObject) resultsJsonObj.get("hourly");
			
			// we will take the data of current hour from the hourly data
			// using index
			
			JSONArray time = (JSONArray) hourly.get("time");
			int index = findIndexOfCurrentTime(time);
			
			// get temperature data
			JSONArray tempData = (JSONArray) hourly.get("temperature_2m");
			double temperature = (double) tempData.get(index);
			
			// get weather code
			JSONArray weathercode = (JSONArray) hourly.get("weather_code");
			String weatherCondition = convertWeatherCode((long) weathercode.get(index));
			
			// get humidity
			JSONArray relativeHumidity = (JSONArray) hourly.get("relative_humidity_2m");
			long humidity = (long) relativeHumidity.get(index);
			
			// get windspeed
			JSONArray windspeedData = (JSONArray) hourly.get("wind_speed_10m");
			double windspeed = (double) windspeedData.get(index);
			
			// building final JSON that will be acessedin frontend
			JSONObject weatherData = new JSONObject();
			
			weatherData.put("temperature", temperature);			
			weatherData.put("weather_condition", weatherCondition);
			weatherData.put("humidity", humidity);
			weatherData.put("windspeed", windspeed);

			return weatherData;
			
		} catch (Exception e) {
			// handle exception
			e.printStackTrace();
		}
		
		return null;
	}
	
	
	// to retrieve Geographic Coordinates
	public static JSONArray getLocationData(String locationName) {
		// replacing whitespace with + > because API format
		locationName = locationName.replaceAll(" ", "+");
		
		String urlString = "https://geocoding-api.open-meteo.com/v1/search?name="+ locationName +"&count=10&language=en&format=json";
		
		try {
			// call api and get a response
			HttpsURLConnection conn = fetchApiResponse(urlString);
			
			// check response status -- HTML codes (200 OK)
			if(conn.getResponseCode() != 200) {
				System.out.println("Api request Failed - No Connection to API");
				return null;
			} else {
				// store Api results
				StringBuilder resultJSON = new StringBuilder();
				
				Scanner scanner = new Scanner(conn.getInputStream());
				
				// read and store the JSON data result 
				while(scanner.hasNext()) {
					resultJSON.append(scanner.nextLine());
				}
				
				//close scanner
				scanner.close();
				
				//close url connection
				conn.disconnect();
				
				//parsing JSON string to JSON object
				
				JSONParser parser  = new JSONParser();
				JSONObject resultsJSONObj = (JSONObject) parser.parse(String.valueOf(resultJSON));
				
				// list of location data generated by API
				JSONArray locationData = (JSONArray) resultsJSONObj.get("results");
				
				return locationData;
			
			}
			
		} catch (Exception e) {
			// handle exception
			e.printStackTrace();
			
		}
		return null;
	}
	
	private static HttpsURLConnection fetchApiResponse(String urlString) {
		try {
			// attempt to create a connection
			URL url = new URL(urlString);
			
			HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
			
			// setting request method to get
			conn.setRequestMethod("GET");
			
			// connect to API
			conn.connect();
			
			return conn;
		} catch(Exception e){
			e.printStackTrace();
		}
		System.out.println("Api request failed");
		return null;
	}

	private static int findIndexOfCurrentTime(JSONArray timeList) {
		String currentTime = getCurrentTime();
		
		// finding our time
		for(int i = 0; i<timeList.size(); i++) {
			String time = (String) timeList.get(i);
			
			if(time.equalsIgnoreCase(currentTime)) return i;
		}
		
		return 0;
	}
	
	public static String getCurrentTime() {
		LocalDateTime currentDateTime = LocalDateTime.now();
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH':00'");
		
		String formattedDateTime = currentDateTime.format(formatter);
		
		return formattedDateTime;
	}

	private static String convertWeatherCode(long weathercode) {
		String weatherCondition = "";
		
		if(weathercode == 0L) {
			weatherCondition = "Clear";
		} else if (weathercode <= 3L && weathercode > 0L) {
			weatherCondition = "Cloudy";
		} else if((weathercode >= 51L && weathercode <= 67L) || (weathercode >= 80L && weathercode <= 99L)) {
			weatherCondition = "Rain";
		} else if ((weathercode >= 71L && weathercode <= 77L)) {
			weatherCondition = "Snow";
		}
		
		return weatherCondition;
	}
}
